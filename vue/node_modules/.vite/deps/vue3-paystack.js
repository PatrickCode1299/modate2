import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
globalThis.global = globalThis.global || __global_polyfill
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'
globalThis.process = globalThis.process || __process_polyfill

import {
  createBaseVNode,
  createElementBlock,
  defineComponent,
  normalizeClass,
  openBlock,
  toDisplayString
} from "./chunk-2EEYJ7FE.js";
import {
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-KI2BRAH6.js";

// node_modules/vue3-paystack/dist/vue3-paystack.esm.js
var import_dist = __toESM(require_dist());
var import_dist2 = __toESM(require_dist2());
var import_dist3 = __toESM(require_dist3());
var script = defineComponent({
  name: "Vue3Paystack",
  // vue component name
  props: {
    // styles
    buttonClass: {
      type: String,
      default: ""
    },
    buttonText: {
      type: String,
      default: ""
    },
    // payment operations
    publicKey: {
      type: String,
      requird: true
    },
    //required
    email: {
      type: String,
      required: true
    },
    //required
    amount: {
      type: Number,
      required: true
    },
    //required
    reference: {
      type: String,
      required: true
    },
    //required
    currency: {
      type: String,
      default: "NGN"
    },
    onSuccess: {
      type: Function,
      default: function(response) {
        console.log(response);
      }
    },
    onCancel: {
      type: Function,
      default: function() {
        console.log("payment closed");
      }
    },
    channels: {
      type: Array,
      default: function() {
        return ["card", "bank", "ussd", "qr", "mobile_money"];
      }
    },
    metadata: {
      type: Object,
      default: function() {
        return {};
      }
    },
    label: {
      type: String,
      default: ""
    }
  },
  async created() {
    this.mountScript().then(() => {
      this.hasScriptLoaded = true;
    });
  },
  data() {
    return {
      hasScriptLoaded: false
    };
  },
  methods: {
    async mountScript() {
      return new Promise((res, rej) => {
        const script2 = document.createElement("script");
        script2.setAttribute("src", "https://js.paystack.co/v2/inline.js");
        script2.setAttribute("type", "text/javascript");
        document.head.appendChild(script2);
        script2.onload = () => res();
        script2.onerror = () => rej();
      });
    },
    payWithPaystack() {
      const paymentOptions = {
        // general options
        key: this.publicKey,
        //required
        email: this.email,
        //required
        amount: this.amount,
        //required
        reference: this.reference,
        //required
        currency: this.currency,
        channels: this.channels,
        metadata: this.metadata,
        label: this.label,
        onSuccess: (response) => {
          this.onSuccess(response);
        },
        onCanel: () => {
          this.onCanel();
        }
        // onBankTransferConfirmationPending: function(response) {
        //   this.onBankTransferConfirmationPending(response);
        // },
        // single split payments
        //subaccount:this.subaccount,  //required for single split
        //transaction_charge:this.transaction_charge,
        //bearer:this.bearer,
        // multi-split payments
        //split_code:this.split_code, //required for multi-split
        // subscriptionss
        // plan: this.plan, //required for subscriptions
        // quantity: this.quantity,
      };
      const paystack = new window.PaystackPop();
      paystack.newTransaction(paymentOptions);
    }
  }
});
var _hoisted_1 = ["disabled"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("button", {
    disabled: !_ctx.hasScriptLoaded,
    class: normalizeClass(_ctx.buttonClass),
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.payWithPaystack && _ctx.payWithPaystack(...args))
  }, [createBaseVNode("span", null, toDisplayString(_ctx.buttonText), 1)], 10, _hoisted_1);
}
script.render = render;
var entry_esm = (() => {
  const installable = script;
  installable.install = (app) => {
    app.component("Vue3Paystack", installable);
  };
  return installable;
})();
export {
  entry_esm as default
};
//# sourceMappingURL=vue3-paystack.js.map
